{"version":3,"sources":["NumberFact.js","App.js","serviceWorker.js","index.js"],"names":["NumberFact","props","className","numberToDisplay","topicToDisplay","factToDisplay","App","getTrivia","triviaNumber","document","getElementById","value","console","log","setState","topic","number","fetch","then","resp","json","data","fact","text","state","getMath","mathNumber","getDate","dateValue","getYear","yearNumber","window","scrollTo","this","type","placeholder","id","onClick","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c649ab0c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst NumberFact = (props) => {\r\n\r\n\treturn (\r\n\r\n\t\t<article className=\"center mw5 mw6-ns hidden ba mv4\">\r\n\t\t  <h1 className=\"tc f4 bg-dark-blue white mv0 pv2 ph3\">{props.numberToDisplay + ' '} {props.topicToDisplay + ' '} fact</h1>\r\n\t\t  <div className=\"pa3 bt\">\r\n\t\t    <p className=\"tc f6 f5-ns lh-copy measure mv0 dark-blue\">\r\n\t\t      {props.factToDisplay}\r\n\t\t    </p>\r\n\t\t  </div>\r\n\t\t</article>\r\n\r\n\t);\r\n\r\n}\r\n\r\n\r\nexport default NumberFact;\r\n","import React, { Component } from 'react';\nimport 'tachyons';\nimport NumberFact from './NumberFact';\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      topic: '',\n      number: '',\n      fact: '',\n    };\n  }\n\n  getTrivia = () => {\n\n    let triviaNumber = document.getElementById(\"triviaInput\").value;\n    console.log(triviaNumber);\n    this.setState({topic: 'trivia'})\n    this.setState({number: document.getElementById(\"triviaInput\").value})\n    fetch(`https://cors-anywhere.herokuapp.com/http://numbersapi.com/${triviaNumber}/trivia?json`)\n      .then(resp => resp.json())\n      .then(data => { return (\n                      this.setState({fact: data.text }),\n                      console.log(this.state.topic, this.state.number, this.state.fact) \n                      );\n                    }\n            )\n  }\n\n\n  getMath = () => {\n\n    let mathNumber = document.getElementById(\"mathInput\").value;\n    console.log(mathNumber);\n    this.setState({topic: 'math'})\n    this.setState({number: document.getElementById(\"mathInput\").value})\n    fetch(`https://cors-anywhere.herokuapp.com/http://numbersapi.com/${mathNumber}/math?json`)\n      .then(resp => resp.json())\n      .then(data => { return (\n                      this.setState({fact: data.text }),\n                      console.log(this.state.topic, this.state.number, this.state.fact) \n                      );\n                    }\n            )\n  }\n\n  getDate = () => {\n\n    let dateValue = document.getElementById(\"dateInput\").value;\n    console.log(dateValue);\n    this.setState({topic: 'date'})\n    this.setState({number: document.getElementById(\"dateInput\").value})\n    fetch(`https://cors-anywhere.herokuapp.com/http://numbersapi.com/${dateValue}/date?json`)\n      .then(resp => resp.json())\n      .then(data => { return (\n                      this.setState({fact: data.text }),\n                      console.log(this.state.topic, this.state.number, this.state.fact) \n                      );\n                    }\n            )\n  }\n\n  getYear = () => {\n\n    let yearNumber = document.getElementById(\"yearInput\").value;\n    console.log(yearNumber);\n    this.setState({topic: 'year'})\n    this.setState({number: document.getElementById(\"yearInput\").value})\n    fetch(`https://cors-anywhere.herokuapp.com/http://numbersapi.com/${yearNumber}/year?json`)\n      .then(resp => resp.json())\n      .then(data => { return (\n                      this.setState({fact: data.text }),\n                      console.log(this.state.topic, this.state.number, this.state.fact) \n                      );\n                    }\n            )\n  }\n\n  componentDidMount() {\n        window.scrollTo(0, 0)\n  }\n\n\n  render () {\n    \n    return (\n\n      <div> \n        \n        <h1 className='tc dark-blue f1 mv4'> Numbers Talk </h1>\n        <h1 className='tc dark-blue f3 mv4'> facts behind numbers </h1>\n        \n        <NumberFact \n          topicToDisplay={this.state.topic} \n          numberToDisplay={this.state.number} \n          factToDisplay={this.state.fact} \n        />\n\n        <h1 className='tc f3 dark-blue'> Trivia\n            <input type='number' className='w5 mh4' placeholder='Enter Number' id='triviaInput' />\n            <p className=\"f5 grow br-pill ba bw2 ph3 pv1 mb1 dib dark-blue pointer\" onClick={this.getTrivia}>Go</p>\n        </h1>\n        \n        <h1 className='tc f3 dark-blue'> Math \n            <input type='number' className='w5 mh4' placeholder='Enter Number' id='mathInput' />\n            <p className=\"f5 grow br-pill ba bw2 ph3 pv1 mb1 dib dark-blue pointer\" onClick={this.getMath}>Go</p>\n        </h1>\n        \n        <h1 className='tc f3 dark-blue'> Date \n            <input className='w5 mh4 gray' type='text' placeholder='Format MM/DD' id='dateInput' />\n            <p className=\"f5 grow br-pill ba bw2 ph3 pv1 mb1 dib dark-blue pointer\" onClick={this.getDate}>Go</p>\n        </h1>\n        \n        <h1 className='tc f3 dark-blue'> Year \n            <input className='w5 mh4' type='year' placeholder='Enter Year' id='yearInput' />\n            <p className=\"f5 grow br-pill ba bw2 ph3 pv1 mb1 dib dark-blue pointer\" onClick={this.getYear}>Go</p>\n        </h1>\n\n\n\n      </div>\n\n      );\n    \n  \n  }\n  \n}\n  \n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}